/**
 * Shutterstock API Reference
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * OpenAPI spec version: 1.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/DownloadHistoryAudio', '../model/DownloadHistoryRevshare', '../model/DownloadHistoryUser'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DownloadHistoryAudio'), require('./DownloadHistoryRevshare'), require('./DownloadHistoryUser'));
  } else {
    // Browser globals (root is window)
    if (!root.ShutterstockApiReference) {
      root.ShutterstockApiReference = {};
    }
    root.ShutterstockApiReference.DownloadHistoryDataListData = factory(root.ShutterstockApiReference.ApiClient, root.ShutterstockApiReference.DownloadHistoryAudio, root.ShutterstockApiReference.DownloadHistoryRevshare, root.ShutterstockApiReference.DownloadHistoryUser);
  }
}(this, function(ApiClient, DownloadHistoryAudio, DownloadHistoryRevshare, DownloadHistoryUser) {
  'use strict';




  /**
   * The DownloadHistoryDataListData model module.
   * @module model/DownloadHistoryDataListData
   * @version 1.2.0
   */

  /**
   * Constructs a new <code>DownloadHistoryDataListData</code>.
   * Information about a downloaded media item. Applicable for all media types, only one of 'audio', 'image' or 'video' will be in a single DownloadHistory object
   * @alias module:model/DownloadHistoryDataListData
   * @class
   * @param download_time {Date} Date the media was downloaded the first time
   * @param id {String} ID of the download
   * @param license {String} The name of the license of this download
   */
  var exports = function(download_time, id, license) {
    var _this = this;


    _this['download_time'] = download_time;
    _this['id'] = id;


    _this['license'] = license;





  };

  /**
   * Constructs a <code>DownloadHistoryDataListData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DownloadHistoryDataListData} obj Optional instance to populate.
   * @return {module:model/DownloadHistoryDataListData} The populated <code>DownloadHistoryDataListData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('audio')) {
        obj['audio'] = DownloadHistoryAudio.constructFromObject(data['audio']);
      }
      if (data.hasOwnProperty('download_time')) {
        obj['download_time'] = ApiClient.convertToType(data['download_time'], 'Date');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('image')) {
        obj['image'] = DownloadHistoryAudio.constructFromObject(data['image']);
      }
      if (data.hasOwnProperty('is_downloadable')) {
        obj['is_downloadable'] = ApiClient.convertToType(data['is_downloadable'], 'Boolean');
      }
      if (data.hasOwnProperty('license')) {
        obj['license'] = ApiClient.convertToType(data['license'], 'String');
      }
      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
      }
      if (data.hasOwnProperty('subscription_id')) {
        obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
      }
      if (data.hasOwnProperty('user')) {
        obj['user'] = DownloadHistoryUser.constructFromObject(data['user']);
      }
      if (data.hasOwnProperty('video')) {
        obj['video'] = DownloadHistoryAudio.constructFromObject(data['video']);
      }
      if (data.hasOwnProperty('revshare')) {
        obj['revshare'] = DownloadHistoryRevshare.constructFromObject(data['revshare']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/DownloadHistoryAudio} audio
   */
  exports.prototype['audio'] = undefined;
  /**
   * Date the media was downloaded the first time
   * @member {Date} download_time
   */
  exports.prototype['download_time'] = undefined;
  /**
   * ID of the download
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {module:model/DownloadHistoryAudio} image
   */
  exports.prototype['image'] = undefined;
  /**
   * Specifies if the media is downloadable via its respective downloads endpoint
   * @member {Boolean} is_downloadable
   */
  exports.prototype['is_downloadable'] = undefined;
  /**
   * The name of the license of this download
   * @member {String} license
   */
  exports.prototype['license'] = undefined;
  /**
   * The metadata that was passed in the original licensing request
   * @member {Object} metadata
   */
  exports.prototype['metadata'] = undefined;
  /**
   * ID of the subscription used to perform this download
   * @member {String} subscription_id
   */
  exports.prototype['subscription_id'] = undefined;
  /**
   * @member {module:model/DownloadHistoryUser} user
   */
  exports.prototype['user'] = undefined;
  /**
   * @member {module:model/DownloadHistoryAudio} video
   */
  exports.prototype['video'] = undefined;
  /**
   * @member {module:model/DownloadHistoryRevshare} revshare
   */
  exports.prototype['revshare'] = undefined;



  return exports;
}));


