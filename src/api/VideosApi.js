/**
 * Shutterstock API Reference
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * OpenAPI spec version: 1.0.31
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/CategoryDataList', '../model/Collection', '../model/CollectionCreateRequest', '../model/CollectionCreateResponse', '../model/CollectionDataList', '../model/CollectionItemDataList', '../model/CollectionItemRequest', '../model/CollectionUpdateRequest', '../model/DownloadHistoryDataList', '../model/LicenseVideoRequest', '../model/LicenseVideoResultDataList', '../model/RedownloadVideo', '../model/Suggestions', '../model/UpdatedMediaDataList', '../model/Url', '../model/Video', '../model/VideoDataList', '../model/VideoSearchResults'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CategoryDataList'), require('../model/Collection'), require('../model/CollectionCreateRequest'), require('../model/CollectionCreateResponse'), require('../model/CollectionDataList'), require('../model/CollectionItemDataList'), require('../model/CollectionItemRequest'), require('../model/CollectionUpdateRequest'), require('../model/DownloadHistoryDataList'), require('../model/LicenseVideoRequest'), require('../model/LicenseVideoResultDataList'), require('../model/RedownloadVideo'), require('../model/Suggestions'), require('../model/UpdatedMediaDataList'), require('../model/Url'), require('../model/Video'), require('../model/VideoDataList'), require('../model/VideoSearchResults'));
  } else {
    // Browser globals (root is window)
    if (!root.ShutterstockApiReference) {
      root.ShutterstockApiReference = {};
    }
    root.ShutterstockApiReference.VideosApi = factory(root.ShutterstockApiReference.ApiClient, root.ShutterstockApiReference.CategoryDataList, root.ShutterstockApiReference.Collection, root.ShutterstockApiReference.CollectionCreateRequest, root.ShutterstockApiReference.CollectionCreateResponse, root.ShutterstockApiReference.CollectionDataList, root.ShutterstockApiReference.CollectionItemDataList, root.ShutterstockApiReference.CollectionItemRequest, root.ShutterstockApiReference.CollectionUpdateRequest, root.ShutterstockApiReference.DownloadHistoryDataList, root.ShutterstockApiReference.LicenseVideoRequest, root.ShutterstockApiReference.LicenseVideoResultDataList, root.ShutterstockApiReference.RedownloadVideo, root.ShutterstockApiReference.Suggestions, root.ShutterstockApiReference.UpdatedMediaDataList, root.ShutterstockApiReference.Url, root.ShutterstockApiReference.Video, root.ShutterstockApiReference.VideoDataList, root.ShutterstockApiReference.VideoSearchResults);
  }
}(this, function(ApiClient, CategoryDataList, Collection, CollectionCreateRequest, CollectionCreateResponse, CollectionDataList, CollectionItemDataList, CollectionItemRequest, CollectionUpdateRequest, DownloadHistoryDataList, LicenseVideoRequest, LicenseVideoResultDataList, RedownloadVideo, Suggestions, UpdatedMediaDataList, Url, Video, VideoDataList, VideoSearchResults) {
  'use strict';

  /**
   * Videos service.
   * @module api/VideosApi
   * @version 1.0.31
   */

  /**
   * Constructs a new VideosApi. 
   * @alias module:api/VideosApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add videos to collections
     * This endpoint adds one or more videos to a collection by video IDs.
     * @param {String} id The ID of the collection to which items should be added
     * @param {module:model/CollectionItemRequest} body Array of video IDs to add to the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addClipboxItemsWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addClipboxItems");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addClipboxItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/videos/collections/{id}/items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add videos to collections
     * This endpoint adds one or more videos to a collection by video IDs.
     * @param {String} id The ID of the collection to which items should be added
     * @param {module:model/CollectionItemRequest} body Array of video IDs to add to the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addClipboxItems = function(id, body) {
      return this.addClipboxItemsWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create video collections
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
     * @param {module:model/CollectionCreateRequest} body Collection metadata
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionCreateResponse} and HTTP response
     */
    this.createClipboxWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createClipbox");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CollectionCreateResponse;

      return this.apiClient.callApi(
        '/v2/videos/collections', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create video collections
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
     * @param {module:model/CollectionCreateRequest} body Collection metadata
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionCreateResponse}
     */
    this.createClipbox = function(body) {
      return this.createClipboxWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete video collections
     * This endpoint deletes a collection.
     * @param {String} id The ID of the collection to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteClipboxWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClipbox");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/videos/collections/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete video collections
     * This endpoint deletes a collection.
     * @param {String} id The ID of the collection to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteClipbox = function(id) {
      return this.deleteClipboxWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove videos from collections
     * This endpoint removes one or more videos from a collection.
     * @param {String} id The ID of the Collection from which items will be deleted
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.item_id One or more video IDs to remove from the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteClipboxItemsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClipboxItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'item_id': {
          value: opts['item_id'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/videos/collections/{id}/items', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove videos from collections
     * This endpoint removes one or more videos from a collection.
     * @param {String} id The ID of the Collection from which items will be deleted
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.item_id One or more video IDs to remove from the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteClipboxItems = function(id, opts) {
      return this.deleteClipboxItemsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download videos
     * This endpoint redownloads videos that you have already received a license for.
     * @param {String} id The license ID of the item to (re)download
     * @param {module:model/RedownloadVideo} body Information about the videos to redownload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Url} and HTTP response
     */
    this.downloadVideosWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadVideos");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling downloadVideos");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Url;

      return this.apiClient.callApi(
        '/v2/videos/licenses/{id}/downloads', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download videos
     * This endpoint redownloads videos that you have already received a license for.
     * @param {String} id The license ID of the item to (re)download
     * @param {module:model/RedownloadVideo} body Information about the videos to redownload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Url}
     */
    this.downloadVideos = function(id, body) {
      return this.downloadVideosWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the details of video collections
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @param {String} id The ID of the collection to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    this.getClipboxWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClipbox");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Collection;

      return this.apiClient.callApi(
        '/v2/videos/collections/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the details of video collections
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @param {String} id The ID of the collection to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    this.getClipbox = function(id) {
      return this.getClipboxWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the contents of video collections
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @param {String} id The ID of the Collection whose items are to be returned
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {module:model/String} opts.sort Sort order (default to oldest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionItemDataList} and HTTP response
     */
    this.getClipboxItemsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClipboxItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['per_page'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CollectionItemDataList;

      return this.apiClient.callApi(
        '/v2/videos/collections/{id}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the contents of video collections
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @param {String} id The ID of the Collection whose items are to be returned
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {module:model/String} opts.sort Sort order (default to oldest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionItemDataList}
     */
    this.getClipboxItems = function(id, opts) {
      return this.getClipboxItemsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List video collections
     * This endpoint lists your collections of videos and their basic attributes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionDataList} and HTTP response
     */
    this.getClipboxListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['per_page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CollectionDataList;

      return this.apiClient.callApi(
        '/v2/videos/collections', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List video collections
     * This endpoint lists your collections of videos and their basic attributes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionDataList}
     */
    this.getClipboxList = function(opts) {
      return this.getClipboxListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List similar videos
     * This endpoint searches for videos that are similar to a video that you specify.
     * @param {String} id The ID of a video for which similar videos should be returned
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoSearchResults} and HTTP response
     */
    this.getSimilarVideosWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSimilarVideos");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'language': opts['language'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'view': opts['view'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VideoSearchResults;

      return this.apiClient.callApi(
        '/v2/videos/{id}/similar', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List similar videos
     * This endpoint searches for videos that are similar to a video that you specify.
     * @param {String} id The ID of a video for which similar videos should be returned
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoSearchResults}
     */
    this.getSimilarVideos = function(id, opts) {
      return this.getSimilarVideosWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List updated videos
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start_date Show videos updated on or after the specified date
     * @param {Date} opts.end_date Show videos updated before the specified date
     * @param {String} opts.interval Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request (default to 1 HOUR)
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {module:model/String} opts.sort Sort by oldest or newest videos first (default to newest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdatedMediaDataList} and HTTP response
     */
    this.getUpdatedVideosWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
        'interval': opts['interval'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UpdatedMediaDataList;

      return this.apiClient.callApi(
        '/v2/videos/updated', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List updated videos
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start_date Show videos updated on or after the specified date
     * @param {Date} opts.end_date Show videos updated before the specified date
     * @param {String} opts.interval Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request (default to 1 HOUR)
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {module:model/String} opts.sort Sort by oldest or newest videos first (default to newest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdatedMediaDataList}
     */
    this.getUpdatedVideos = function(opts) {
      return this.getUpdatedVideosWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about videos
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @param {String} id Video ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to full)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Video} and HTTP response
     */
    this.getVideoWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'language': opts['language'],
        'view': opts['view'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Video;

      return this.apiClient.callApi(
        '/v2/videos/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details about videos
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @param {String} id Video ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to full)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Video}
     */
    this.getVideo = function(id, opts) {
      return this.getVideoWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List video categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryDataList} and HTTP response
     */
    this.getVideoCategoriesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'language': opts['language'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CategoryDataList;

      return this.apiClient.callApi(
        '/v2/videos/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List video categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryDataList}
     */
    this.getVideoCategories = function(opts) {
      return this.getVideoCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List video licenses
     * This endpoint lists existing licenses.
     * @param {Object} opts Optional parameters
     * @param {String} opts.video_id Show licenses for the specified video ID
     * @param {String} opts.license Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.sort Sort by oldest or newest videos first (default to newest)
     * @param {String} opts.username Filter licenses by username of licensee
     * @param {Date} opts.start_date Show licenses created on or after the specified date
     * @param {Date} opts.end_date Show licenses created before the specified date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DownloadHistoryDataList} and HTTP response
     */
    this.getVideoLicenseListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'video_id': opts['video_id'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DownloadHistoryDataList;

      return this.apiClient.callApi(
        '/v2/videos/licenses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List video licenses
     * This endpoint lists existing licenses.
     * @param {Object} opts Optional parameters
     * @param {String} opts.video_id Show licenses for the specified video ID
     * @param {String} opts.license Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.sort Sort by oldest or newest videos first (default to newest)
     * @param {String} opts.username Filter licenses by username of licensee
     * @param {Date} opts.start_date Show licenses created on or after the specified date
     * @param {Date} opts.end_date Show licenses created before the specified date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DownloadHistoryDataList}
     */
    this.getVideoLicenseList = function(opts) {
      return this.getVideoLicenseListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List videos
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @param {Array.<String>} id One or more video IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoDataList} and HTTP response
     */
    this.getVideoListWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideoList");
      }


      var pathParams = {
      };
      var queryParams = {
        'view': opts['view'],
      };
      var collectionQueryParams = {
        'id': {
          value: id,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VideoDataList;

      return this.apiClient.callApi(
        '/v2/videos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List videos
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @param {Array.<String>} id One or more video IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoDataList}
     */
    this.getVideoList = function(id, opts) {
      return this.getVideoListWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param {String} query Search term for which you want keyword suggestions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the number of the suggestions (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Suggestions} and HTTP response
     */
    this.getVideoSuggestionsWithHttpInfo = function(query, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getVideoSuggestions");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Suggestions;

      return this.apiClient.callApi(
        '/v2/videos/search/suggestions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param {String} query Search term for which you want keyword suggestions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the number of the suggestions (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Suggestions}
     */
    this.getVideoSuggestions = function(query, opts) {
      return this.getVideoSuggestionsWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * License videos
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters.
     * @param {module:model/LicenseVideoRequest} body List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscription_id The subscription ID to use for licensing
     * @param {module:model/String} opts.size The size of the video to license (default to web)
     * @param {String} opts.search_id The Search ID that led to this licensing event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LicenseVideoResultDataList} and HTTP response
     */
    this.licenseVideosWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling licenseVideos");
      }


      var pathParams = {
      };
      var queryParams = {
        'subscription_id': opts['subscription_id'],
        'size': opts['size'],
        'search_id': opts['search_id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LicenseVideoResultDataList;

      return this.apiClient.callApi(
        '/v2/videos/licenses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * License videos
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters.
     * @param {module:model/LicenseVideoRequest} body List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscription_id The subscription ID to use for licensing
     * @param {module:model/String} opts.size The size of the video to license (default to web)
     * @param {String} opts.search_id The Search ID that led to this licensing event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LicenseVideoResultDataList}
     */
    this.licenseVideos = function(body, opts) {
      return this.licenseVideosWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename video collections
     * This endpoint sets a new name for a collection.
     * @param {String} id The ID of the collection to rename
     * @param {module:model/CollectionUpdateRequest} body The new name for the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameClipboxWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling renameClipbox");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameClipbox");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/videos/collections/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename video collections
     * This endpoint sets a new name for a collection.
     * @param {String} id The ID of the collection to rename
     * @param {module:model/CollectionUpdateRequest} body The new name for the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameClipbox = function(id, body) {
      return this.renameClipboxWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for videos
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.added_date Show videos added on the specified date
     * @param {Date} opts.added_date_start Show videos added on or after the specified date
     * @param {Date} opts.added_date_end Show videos added before the specified date
     * @param {module:model/String} opts.aspect_ratio Show videos with the specified aspect ratio
     * @param {String} opts.category Show videos with the specified Shutterstock-defined category; specify a category name or ID
     * @param {Array.<String>} opts.contributor Show videos with the specified artist names or IDs
     * @param {Array.<String>} opts.contributor_country Show videos from contributors in one or more specified countries
     * @param {Number} opts.duration (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds
     * @param {Number} opts.duration_from Show videos with the specified duration or longer in seconds
     * @param {Number} opts.duration_to Show videos with the specified duration or shorter in seconds
     * @param {Number} opts.fps (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
     * @param {Number} opts.fps_from Show videos with the specified frames per second or more
     * @param {Number} opts.fps_to Show videos with the specified frames per second or fewer
     * @param {Boolean} opts.keyword_safe_search Hide results with potentially unsafe keywords (default to true)
     * @param {module:model/String} opts.language Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} opts.license Show only videos with the specified license or licenses
     * @param {Array.<String>} opts.model Show videos with each of the specified models
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.people_age Show videos that feature people of the specified age range
     * @param {Array.<module:model/String>} opts.people_ethnicity Show videos with people of the specified ethnicities
     * @param {module:model/String} opts.people_gender Show videos with people with the specified gender
     * @param {Number} opts.people_number Show videos with the specified number of people
     * @param {Boolean} opts.people_model_released Show only videos of people with a signed model release
     * @param {String} opts.query One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
     * @param {module:model/String} opts.resolution Show videos with the specified resolution
     * @param {Boolean} opts.safe Enable or disable safe search (default to true)
     * @param {module:model/String} opts.sort Sort by one of these categories (default to popular)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoSearchResults} and HTTP response
     */
    this.searchVideosWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'added_date': opts['added_date'],
        'added_date_start': opts['added_date_start'],
        'added_date_end': opts['added_date_end'],
        'aspect_ratio': opts['aspect_ratio'],
        'category': opts['category'],
        'duration': opts['duration'],
        'duration_from': opts['duration_from'],
        'duration_to': opts['duration_to'],
        'fps': opts['fps'],
        'fps_from': opts['fps_from'],
        'fps_to': opts['fps_to'],
        'keyword_safe_search': opts['keyword_safe_search'],
        'language': opts['language'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'people_age': opts['people_age'],
        'people_gender': opts['people_gender'],
        'people_number': opts['people_number'],
        'people_model_released': opts['people_model_released'],
        'query': opts['query'],
        'resolution': opts['resolution'],
        'safe': opts['safe'],
        'sort': opts['sort'],
        'view': opts['view'],
      };
      var collectionQueryParams = {
        'contributor': {
          value: opts['contributor'],
          collectionFormat: 'multi'
        },
        'contributor_country': {
          value: opts['contributor_country'],
          collectionFormat: 'multi'
        },
        'license': {
          value: opts['license'],
          collectionFormat: 'multi'
        },
        'model': {
          value: opts['model'],
          collectionFormat: 'multi'
        },
        'people_ethnicity': {
          value: opts['people_ethnicity'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VideoSearchResults;

      return this.apiClient.callApi(
        '/v2/videos/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search for videos
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.added_date Show videos added on the specified date
     * @param {Date} opts.added_date_start Show videos added on or after the specified date
     * @param {Date} opts.added_date_end Show videos added before the specified date
     * @param {module:model/String} opts.aspect_ratio Show videos with the specified aspect ratio
     * @param {String} opts.category Show videos with the specified Shutterstock-defined category; specify a category name or ID
     * @param {Array.<String>} opts.contributor Show videos with the specified artist names or IDs
     * @param {Array.<String>} opts.contributor_country Show videos from contributors in one or more specified countries
     * @param {Number} opts.duration (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds
     * @param {Number} opts.duration_from Show videos with the specified duration or longer in seconds
     * @param {Number} opts.duration_to Show videos with the specified duration or shorter in seconds
     * @param {Number} opts.fps (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
     * @param {Number} opts.fps_from Show videos with the specified frames per second or more
     * @param {Number} opts.fps_to Show videos with the specified frames per second or fewer
     * @param {Boolean} opts.keyword_safe_search Hide results with potentially unsafe keywords (default to true)
     * @param {module:model/String} opts.language Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} opts.license Show only videos with the specified license or licenses
     * @param {Array.<String>} opts.model Show videos with each of the specified models
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.people_age Show videos that feature people of the specified age range
     * @param {Array.<module:model/String>} opts.people_ethnicity Show videos with people of the specified ethnicities
     * @param {module:model/String} opts.people_gender Show videos with people with the specified gender
     * @param {Number} opts.people_number Show videos with the specified number of people
     * @param {Boolean} opts.people_model_released Show only videos of people with a signed model release
     * @param {String} opts.query One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
     * @param {module:model/String} opts.resolution Show videos with the specified resolution
     * @param {Boolean} opts.safe Enable or disable safe search (default to true)
     * @param {module:model/String} opts.sort Sort by one of these categories (default to popular)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoSearchResults}
     */
    this.searchVideos = function(opts) {
      return this.searchVideosWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
