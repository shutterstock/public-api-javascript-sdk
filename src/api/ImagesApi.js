/**
 * Shutterstock API Reference
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * OpenAPI spec version: 1.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/Body', '../model/Body1', '../model/Body2', '../model/Body3', '../model/Body4', '../model/Body5', '../model/Body6', '../model/InlineResponse200', '../model/InlineResponse2001', '../model/InlineResponse2002', '../model/InlineResponse2003', '../model/InlineResponse2004', '../model/InlineResponse2005', '../model/InlineResponse201'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/Body2'), require('../model/Body3'), require('../model/Body4'), require('../model/Body5'), require('../model/Body6'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/InlineResponse201'));
  } else {
    // Browser globals (root is window)
    if (!root.ShutterstockApiReference) {
      root.ShutterstockApiReference = {};
    }
    root.ShutterstockApiReference.ImagesApi = factory(root.ShutterstockApiReference.ApiClient, root.ShutterstockApiReference.Body, root.ShutterstockApiReference.Body1, root.ShutterstockApiReference.Body2, root.ShutterstockApiReference.Body3, root.ShutterstockApiReference.Body4, root.ShutterstockApiReference.Body5, root.ShutterstockApiReference.Body6, root.ShutterstockApiReference.InlineResponse200, root.ShutterstockApiReference.InlineResponse2001, root.ShutterstockApiReference.InlineResponse2002, root.ShutterstockApiReference.InlineResponse2003, root.ShutterstockApiReference.InlineResponse2004, root.ShutterstockApiReference.InlineResponse2005, root.ShutterstockApiReference.InlineResponse201);
  }
}(this, function(ApiClient, Body, Body1, Body2, Body3, Body4, Body5, Body6, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003, InlineResponse2004, InlineResponse2005, InlineResponse201) {
  'use strict';

  /**
   * Images service.
   * @module api/ImagesApi
   * @version 1.2.0
   */

  /**
   * Constructs a new ImagesApi. 
   * @alias module:api/ImagesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    this.setAppName = function (value) {
      this.apiClient.defaultHeaders = Object.assign({}, this.apiClient.defaultHeaders, {
        'x-shutterstock-application': value + ',shutterstock-sdk/v1.2.0',
      });
    };




    /**
     * Add images to collections
     * This endpoint adds one or more images to a collection by image IDs.
     * @param {String} id Collection ID
     * @param {module:model/Body6} body Array of image IDs to add to the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addImageCollectionItemsWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addImageCollectionItems");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addImageCollectionItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/images/collections/{id}/items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add images to collections
     * This endpoint adds one or more images to a collection by image IDs.
     * @param {String} id Collection ID
     * @param {module:model/Body6} body Array of image IDs to add to the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addImageCollectionItems = function(id, body) {
      return this.addImageCollectionItemsWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run multiple image searches
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
     * @param {Array.<module:model/Body>} body List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {Date} opts.added_date Show images added on the specified date
     * @param {Date} opts.added_date_start Show images added on or after the specified date
     * @param {Number} opts.aspect_ratio_min Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio_max Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Date} opts.added_date_end Show images added before the specified date
     * @param {String} opts.category Show images with the specified Shutterstock-defined category; specify a category name or ID
     * @param {String} opts.color Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     * @param {Array.<String>} opts.contributor Show images with the specified contributor names or IDs, allows multiple
     * @param {Object} opts.contributor_country Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     * @param {String} opts.fields Fields to display in the response; see the documentation for the fields parameter in the overview section
     * @param {Number} opts.height (Deprecated; use height_from and height_to instead) Show images with the specified height
     * @param {Number} opts.height_from Show images with the specified height or larger, in pixels
     * @param {Number} opts.height_to Show images with the specified height or smaller, in pixels
     * @param {Array.<module:model/String>} opts.image_type Show images of the specified type
     * @param {Boolean} opts.keyword_safe_search Hide results with potentially unsafe keywords (default to true)
     * @param {module:model/String} opts.language Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} opts.license Show only images with the specified license
     * @param {Array.<String>} opts.model Show image results with the specified model IDs
     * @param {module:model/String} opts.orientation Show image results with horizontal or vertical orientation
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {Boolean} opts.people_model_released Show images of people with a signed model release
     * @param {module:model/String} opts.people_age Show images that feature people of the specified age category
     * @param {Array.<module:model/String>} opts.people_ethnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     * @param {module:model/String} opts.people_gender Show images with people of the specified gender
     * @param {Number} opts.people_number Show images with the specified number of people
     * @param {Object} opts.region Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     * @param {Boolean} opts.safe Enable or disable safe search (default to true)
     * @param {module:model/String} opts.sort Sort by (default to popular)
     * @param {Boolean} opts.spellcheck_query Spellcheck the search query and return results on suggested spellings (default to true)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @param {Number} opts.width (Deprecated; use width_from and width_to instead) Show images with the specified width
     * @param {Number} opts.width_from Show images with the specified width or larger, in pixels
     * @param {Number} opts.width_to Show images with the specified width or smaller, in pixels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.bulkSearchImagesWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkSearchImages");
      }


      var pathParams = {
      };
      var queryParams = {
        'added_date': opts['added_date'],
        'added_date_start': opts['added_date_start'],
        'aspect_ratio_min': opts['aspect_ratio_min'],
        'aspect_ratio_max': opts['aspect_ratio_max'],
        'aspect_ratio': opts['aspect_ratio'],
        'added_date_end': opts['added_date_end'],
        'category': opts['category'],
        'color': opts['color'],
        'contributor_country': opts['contributor_country'],
        'fields': opts['fields'],
        'height': opts['height'],
        'height_from': opts['height_from'],
        'height_to': opts['height_to'],
        'keyword_safe_search': opts['keyword_safe_search'],
        'language': opts['language'],
        'orientation': opts['orientation'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'people_model_released': opts['people_model_released'],
        'people_age': opts['people_age'],
        'people_gender': opts['people_gender'],
        'people_number': opts['people_number'],
        'region': opts['region'],
        'safe': opts['safe'],
        'sort': opts['sort'],
        'spellcheck_query': opts['spellcheck_query'],
        'view': opts['view'],
        'width': opts['width'],
        'width_from': opts['width_from'],
        'width_to': opts['width_to'],
      };
      var collectionQueryParams = {
        'contributor': {
          value: opts['contributor'],
          collectionFormat: 'multi'
        },
        'image_type': {
          value: opts['image_type'],
          collectionFormat: 'multi'
        },
        'license': {
          value: opts['license'],
          collectionFormat: 'multi'
        },
        'model': {
          value: opts['model'],
          collectionFormat: 'multi'
        },
        'people_ethnicity': {
          value: opts['people_ethnicity'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v2/bulk_search/images', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Run multiple image searches
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
     * @param {Array.<module:model/Body>} body List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {Date} opts.added_date Show images added on the specified date
     * @param {Date} opts.added_date_start Show images added on or after the specified date
     * @param {Number} opts.aspect_ratio_min Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio_max Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Date} opts.added_date_end Show images added before the specified date
     * @param {String} opts.category Show images with the specified Shutterstock-defined category; specify a category name or ID
     * @param {String} opts.color Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     * @param {Array.<String>} opts.contributor Show images with the specified contributor names or IDs, allows multiple
     * @param {Object} opts.contributor_country Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     * @param {String} opts.fields Fields to display in the response; see the documentation for the fields parameter in the overview section
     * @param {Number} opts.height (Deprecated; use height_from and height_to instead) Show images with the specified height
     * @param {Number} opts.height_from Show images with the specified height or larger, in pixels
     * @param {Number} opts.height_to Show images with the specified height or smaller, in pixels
     * @param {Array.<module:model/String>} opts.image_type Show images of the specified type
     * @param {Boolean} opts.keyword_safe_search Hide results with potentially unsafe keywords (default to true)
     * @param {module:model/String} opts.language Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} opts.license Show only images with the specified license
     * @param {Array.<String>} opts.model Show image results with the specified model IDs
     * @param {module:model/String} opts.orientation Show image results with horizontal or vertical orientation
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {Boolean} opts.people_model_released Show images of people with a signed model release
     * @param {module:model/String} opts.people_age Show images that feature people of the specified age category
     * @param {Array.<module:model/String>} opts.people_ethnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     * @param {module:model/String} opts.people_gender Show images with people of the specified gender
     * @param {Number} opts.people_number Show images with the specified number of people
     * @param {Object} opts.region Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     * @param {Boolean} opts.safe Enable or disable safe search (default to true)
     * @param {module:model/String} opts.sort Sort by (default to popular)
     * @param {Boolean} opts.spellcheck_query Spellcheck the search query and return results on suggested spellings (default to true)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @param {Number} opts.width (Deprecated; use width_from and width_to instead) Show images with the specified width
     * @param {Number} opts.width_from Show images with the specified width or larger, in pixels
     * @param {Number} opts.width_to Show images with the specified width or smaller, in pixels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.bulkSearchImages = function(body, opts) {
      return this.bulkSearchImagesWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create image collections
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
     * @param {module:model/Body4} body The names of the new collections
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
    this.createImageCollectionWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageCollection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/v2/images/collections', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create image collections
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
     * @param {module:model/Body4} body The names of the new collections
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}
     */
    this.createImageCollection = function(body) {
      return this.createImageCollectionWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete image collections
     * This endpoint deletes an image collection.
     * @param {String} id Collection ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteImageCollectionWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImageCollection");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/images/collections/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete image collections
     * This endpoint deletes an image collection.
     * @param {String} id Collection ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteImageCollection = function(id) {
      return this.deleteImageCollectionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove images from collections
     * This endpoint removes one or more images from a collection.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.item_id One or more image IDs to remove from the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteImageCollectionItemsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImageCollectionItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'item_id': {
          value: opts['item_id'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/images/collections/{id}/items', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove images from collections
     * This endpoint removes one or more images from a collection.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.item_id One or more image IDs to remove from the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteImageCollectionItems = function(id, opts) {
      return this.deleteImageCollectionItemsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download images
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param {String} id License ID
     * @param {module:model/Body3} body Information about the images to redownload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.downloadImageWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadImage");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling downloadImage");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v2/images/licenses/{id}/downloads', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download images
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param {String} id License ID
     * @param {module:model/Body3} body Information about the images to redownload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.downloadImage = function(id, body) {
      return this.downloadImageWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about images
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Image ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to full)
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    this.getImageWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImage");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'language': opts['language'],
        'view': opts['view'],
        'search_id': opts['search_id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/v2/images/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details about images
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Image ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to full)
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    this.getImage = function(id, opts) {
      return this.getImageWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the details of image collections
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.embed Which sharing information to include in the response, such as a URL to the collection
     * @param {String} opts.share_code Code to retrieve a shared collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    this.getImageCollectionWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageCollection");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'share_code': opts['share_code'],
      };
      var collectionQueryParams = {
        'embed': {
          value: opts['embed'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/v2/images/collections/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the details of image collections
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.embed Which sharing information to include in the response, such as a URL to the collection
     * @param {String} opts.share_code Code to retrieve a shared collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    this.getImageCollection = function(id, opts) {
      return this.getImageCollectionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the contents of image collections
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {String} opts.share_code Code to retrieve the contents of a shared collection
     * @param {module:model/String} opts.sort Sort order (default to oldest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getImageCollectionItemsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageCollectionItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['per_page'],
        'share_code': opts['share_code'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/collections/{id}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the contents of image collections
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {String} opts.share_code Code to retrieve the contents of a shared collection
     * @param {module:model/String} opts.sort Sort order (default to oldest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getImageCollectionItems = function(id, opts) {
      return this.getImageCollectionItemsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List image collections
     * This endpoint lists your collections of images and their basic attributes.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.embed Which sharing information to include in the response, such as a URL to the collection
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getImageCollectionListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['per_page'],
      };
      var collectionQueryParams = {
        'embed': {
          value: opts['embed'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/collections', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List image collections
     * This endpoint lists your collections of images and their basic attributes.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.embed Which sharing information to include in the response, such as a URL to the collection
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getImageCollectionList = function(opts) {
      return this.getImageCollectionListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get keywords from text
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @param {module:model/Body1} body Plain text to extract keywords from
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getImageKeywordSuggestionsWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getImageKeywordSuggestions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/search/suggestions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get keywords from text
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @param {module:model/Body1} body Plain text to extract keywords from
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getImageKeywordSuggestions = function(body) {
      return this.getImageKeywordSuggestionsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List image licenses
     * This endpoint lists existing licenses.
     * @param {Object} opts Optional parameters
     * @param {String} opts.image_id Show licenses for the specified image ID
     * @param {String} opts.license Show images that are available with the specified license, such as `standard` or `enhanced`
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.sort Sort order (default to newest)
     * @param {String} opts.username Filter licenses by username of licensee
     * @param {Date} opts.start_date Show licenses created on or after the specified date
     * @param {Date} opts.end_date Show licenses created before the specified date
     * @param {module:model/String} opts.download_availability Filter licenses by download availability (default to all)
     * @param {Boolean} opts.team_history Set to true to see license history for all members of your team. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getImageLicenseListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'image_id': opts['image_id'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
        'download_availability': opts['download_availability'],
        'team_history': opts['team_history'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/licenses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List image licenses
     * This endpoint lists existing licenses.
     * @param {Object} opts Optional parameters
     * @param {String} opts.image_id Show licenses for the specified image ID
     * @param {String} opts.license Show images that are available with the specified license, such as `standard` or `enhanced`
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.sort Sort order (default to newest)
     * @param {String} opts.username Filter licenses by username of licensee
     * @param {Date} opts.start_date Show licenses created on or after the specified date
     * @param {Date} opts.end_date Show licenses created before the specified date
     * @param {module:model/String} opts.download_availability Filter licenses by download availability (default to all)
     * @param {Boolean} opts.team_history Set to true to see license history for all members of your team. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getImageLicenseList = function(opts) {
      return this.getImageLicenseListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List images
     * This endpoint lists information about one or more images, including the available sizes.
     * @param {Array.<String>} id One or more image IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getImageListWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageList");
      }


      var pathParams = {
      };
      var queryParams = {
        'view': opts['view'],
        'search_id': opts['search_id'],
      };
      var collectionQueryParams = {
        'id': {
          value: id,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List images
     * This endpoint lists information about one or more images, including the available sizes.
     * @param {Array.<String>} id One or more image IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getImageList = function(id, opts) {
      return this.getImageListWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List recommended images
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @param {Array.<String>} id Image IDs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max_items Maximum number of results returned in the response (default to 20)
     * @param {Boolean} opts.safe Restrict results to safe images (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getImageRecommendationsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageRecommendations");
      }


      var pathParams = {
      };
      var queryParams = {
        'max_items': opts['max_items'],
        'safe': opts['safe'],
      };
      var collectionQueryParams = {
        'id': {
          value: id,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/recommendations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List recommended images
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @param {Array.<String>} id Image IDs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max_items Maximum number of results returned in the response (default to 20)
     * @param {Boolean} opts.safe Restrict results to safe images (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getImageRecommendations = function(id, opts) {
      return this.getImageRecommendationsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param {String} query Search term for which you want keyword suggestions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the number of suggestions (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    this.getImageSuggestionsWithHttpInfo = function(query, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getImageSuggestions");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/v2/images/search/suggestions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param {String} query Search term for which you want keyword suggestions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the number of suggestions (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    this.getImageSuggestions = function(query, opts) {
      return this.getImageSuggestionsWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List updated images
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.type Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways
     * @param {String} opts.start_date Show images updated on or after the specified date. The API will default to UTC (00:00:00) if no specific time is provided, ensuring consistency.
     * @param {String} opts.end_date Show images updated before the specified date. The API will default to UTC (00:00:00) if no specific time is provided, ensuring consistency. Please note that the end date must be at least 5 minutes after the start date.
     * @param {String} opts.interval Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request (default to 1 HOUR)
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {module:model/String} opts.sort Sort order (default to newest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getUpdatedImagesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
        'interval': opts['interval'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
        'type': {
          value: opts['type'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/updated', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List updated images
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.type Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways
     * @param {String} opts.start_date Show images updated on or after the specified date. The API will default to UTC (00:00:00) if no specific time is provided, ensuring consistency.
     * @param {String} opts.end_date Show images updated before the specified date. The API will default to UTC (00:00:00) if no specific time is provided, ensuring consistency. Please note that the end date must be at least 5 minutes after the start date.
     * @param {String} opts.interval Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request (default to 1 HOUR)
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 100)
     * @param {module:model/String} opts.sort Sort order (default to newest)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getUpdatedImages = function(opts) {
      return this.getUpdatedImagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * License images
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param {module:model/Body2} body List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscription_id Subscription ID to use to license the image
     * @param {module:model/String} opts.format (Deprecated) Image format
     * @param {module:model/String} opts.size Image size (default to huge)
     * @param {String} opts.search_id Search ID that was provided in the results of an image search
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.licenseImagesWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling licenseImages");
      }


      var pathParams = {
      };
      var queryParams = {
        'subscription_id': opts['subscription_id'],
        'format': opts['format'],
        'size': opts['size'],
        'search_id': opts['search_id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/licenses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * License images
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param {module:model/Body2} body List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscription_id Subscription ID to use to license the image
     * @param {module:model/String} opts.format (Deprecated) Image format
     * @param {module:model/String} opts.size Image size (default to huge)
     * @param {String} opts.search_id Search ID that was provided in the results of an image search
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.licenseImages = function(body, opts) {
      return this.licenseImagesWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List image categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.listImageCategoriesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'language': opts['language'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/images/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List image categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.listImageCategories = function(opts) {
      return this.listImageCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify.
     * @param {String} id Image ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.listSimilarImagesWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSimilarImages");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'language': opts['language'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'view': opts['view'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v2/images/{id}/similar', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify.
     * @param {String} id Image ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language Language for the keywords and categories in the response
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.listSimilarImages = function(id, opts) {
      return this.listSimilarImagesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename image collections
     * This endpoint sets a new name for an image collection.
     * @param {String} id Collection ID
     * @param {module:model/Body5} body The new name for the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameImageCollectionWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling renameImageCollection");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameImageCollection");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/images/collections/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename image collections
     * This endpoint sets a new name for an image collection.
     * @param {String} id Collection ID
     * @param {module:model/Body5} body The new name for the collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameImageCollection = function(id, body) {
      return this.renameImageCollectionWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for images
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.library Search within different Shutterstock owned libraries (default to ["shutterstock"])
     * @param {Date} opts.added_date Show images added on the specified date
     * @param {Date} opts.added_date_start Show images added on or after the specified date
     * @param {Number} opts.aspect_ratio_min Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio_max Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Date} opts.added_date_end Show images added before the specified date
     * @param {String} opts.category Show images with the specified Shutterstock-defined category; specify a category name or ID
     * @param {String} opts.color Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     * @param {Array.<String>} opts.contributor Show images with the specified contributor names or IDs, allows multiple
     * @param {Object} opts.contributor_country Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     * @param {String} opts.fields Fields to display in the response; see the documentation for the fields parameter in the overview section
     * @param {Number} opts.height (Deprecated; use height_from and height_to instead) Show images with the specified height
     * @param {Number} opts.height_from Show images with the specified height or larger, in pixels
     * @param {Number} opts.height_to Show images with the specified height or smaller, in pixels
     * @param {Array.<module:model/String>} opts.image_type Show images of the specified type
     * @param {Boolean} opts.keyword_safe_search Hide results with potentially unsafe keywords (default to true)
     * @param {module:model/String} opts.language Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} opts.license Show only images with the specified license
     * @param {Array.<String>} opts.model Show image results with the specified model IDs
     * @param {module:model/String} opts.orientation Show image results with horizontal or vertical orientation
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {Boolean} opts.people_model_released Show images of people with a signed model release
     * @param {module:model/String} opts.people_age Show images that feature people of the specified age category
     * @param {Array.<module:model/String>} opts.people_ethnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     * @param {module:model/String} opts.people_gender Show images with people of the specified gender
     * @param {Number} opts.people_number Show images with the specified number of people
     * @param {String} opts.query One or more search terms separated by spaces; you can use NOT to filter out images that match a term
     * @param {Object} opts.region Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     * @param {Boolean} opts.safe Enable or disable safe search (default to true)
     * @param {module:model/String} opts.sort Sort by (default to popular)
     * @param {Boolean} opts.spellcheck_query Spellcheck the search query and return results on suggested spellings (default to true)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @param {Number} opts.width (Deprecated; use width_from and width_to instead) Show images with the specified width
     * @param {Number} opts.width_from Show images with the specified width or larger, in pixels
     * @param {Number} opts.width_to Show images with the specified width or smaller, in pixels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.searchImagesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'added_date': opts['added_date'],
        'added_date_start': opts['added_date_start'],
        'aspect_ratio_min': opts['aspect_ratio_min'],
        'aspect_ratio_max': opts['aspect_ratio_max'],
        'aspect_ratio': opts['aspect_ratio'],
        'added_date_end': opts['added_date_end'],
        'category': opts['category'],
        'color': opts['color'],
        'contributor_country': opts['contributor_country'],
        'fields': opts['fields'],
        'height': opts['height'],
        'height_from': opts['height_from'],
        'height_to': opts['height_to'],
        'keyword_safe_search': opts['keyword_safe_search'],
        'language': opts['language'],
        'orientation': opts['orientation'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'people_model_released': opts['people_model_released'],
        'people_age': opts['people_age'],
        'people_gender': opts['people_gender'],
        'people_number': opts['people_number'],
        'query': opts['query'],
        'region': opts['region'],
        'safe': opts['safe'],
        'sort': opts['sort'],
        'spellcheck_query': opts['spellcheck_query'],
        'view': opts['view'],
        'width': opts['width'],
        'width_from': opts['width_from'],
        'width_to': opts['width_to'],
      };
      var collectionQueryParams = {
        'library': {
          value: opts['library'],
          collectionFormat: 'multi'
        },
        'contributor': {
          value: opts['contributor'],
          collectionFormat: 'multi'
        },
        'image_type': {
          value: opts['image_type'],
          collectionFormat: 'multi'
        },
        'license': {
          value: opts['license'],
          collectionFormat: 'multi'
        },
        'model': {
          value: opts['model'],
          collectionFormat: 'multi'
        },
        'people_ethnicity': {
          value: opts['people_ethnicity'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v2/images/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search for images
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.library Search within different Shutterstock owned libraries (default to ["shutterstock"])
     * @param {Date} opts.added_date Show images added on the specified date
     * @param {Date} opts.added_date_start Show images added on or after the specified date
     * @param {Number} opts.aspect_ratio_min Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio_max Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} opts.aspect_ratio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Date} opts.added_date_end Show images added before the specified date
     * @param {String} opts.category Show images with the specified Shutterstock-defined category; specify a category name or ID
     * @param {String} opts.color Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     * @param {Array.<String>} opts.contributor Show images with the specified contributor names or IDs, allows multiple
     * @param {Object} opts.contributor_country Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     * @param {String} opts.fields Fields to display in the response; see the documentation for the fields parameter in the overview section
     * @param {Number} opts.height (Deprecated; use height_from and height_to instead) Show images with the specified height
     * @param {Number} opts.height_from Show images with the specified height or larger, in pixels
     * @param {Number} opts.height_to Show images with the specified height or smaller, in pixels
     * @param {Array.<module:model/String>} opts.image_type Show images of the specified type
     * @param {Boolean} opts.keyword_safe_search Hide results with potentially unsafe keywords (default to true)
     * @param {module:model/String} opts.language Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} opts.license Show only images with the specified license
     * @param {Array.<String>} opts.model Show image results with the specified model IDs
     * @param {module:model/String} opts.orientation Show image results with horizontal or vertical orientation
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {Boolean} opts.people_model_released Show images of people with a signed model release
     * @param {module:model/String} opts.people_age Show images that feature people of the specified age category
     * @param {Array.<module:model/String>} opts.people_ethnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     * @param {module:model/String} opts.people_gender Show images with people of the specified gender
     * @param {Number} opts.people_number Show images with the specified number of people
     * @param {String} opts.query One or more search terms separated by spaces; you can use NOT to filter out images that match a term
     * @param {Object} opts.region Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     * @param {Boolean} opts.safe Enable or disable safe search (default to true)
     * @param {module:model/String} opts.sort Sort by (default to popular)
     * @param {Boolean} opts.spellcheck_query Spellcheck the search query and return results on suggested spellings (default to true)
     * @param {module:model/String} opts.view Amount of detail to render in the response (default to minimal)
     * @param {Number} opts.width (Deprecated; use width_from and width_to instead) Show images with the specified width
     * @param {Number} opts.width_from Show images with the specified width or larger, in pixels
     * @param {Number} opts.width_to Show images with the specified width or smaller, in pixels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.searchImages = function(opts) {
      return this.searchImagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
