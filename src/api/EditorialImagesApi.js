/**
 * Shutterstock API Reference
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * OpenAPI spec version: 1.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/Body17', '../model/Body24', '../model/InlineResponse20014', '../model/InlineResponse20015', '../model/InlineResponse20016', '../model/InlineResponse20017', '../model/InlineResponse20018', '../model/InlineResponse20019', '../model/InlineResponse20020', '../model/InlineResponse20032', '../model/InlineResponse20033'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body17'), require('../model/Body24'), require('../model/InlineResponse20014'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse20017'), require('../model/InlineResponse20018'), require('../model/InlineResponse20019'), require('../model/InlineResponse20020'), require('../model/InlineResponse20032'), require('../model/InlineResponse20033'));
  } else {
    // Browser globals (root is window)
    if (!root.ShutterstockApiReference) {
      root.ShutterstockApiReference = {};
    }
    root.ShutterstockApiReference.EditorialImagesApi = factory(root.ShutterstockApiReference.ApiClient, root.ShutterstockApiReference.Body17, root.ShutterstockApiReference.Body24, root.ShutterstockApiReference.InlineResponse20014, root.ShutterstockApiReference.InlineResponse20015, root.ShutterstockApiReference.InlineResponse20016, root.ShutterstockApiReference.InlineResponse20017, root.ShutterstockApiReference.InlineResponse20018, root.ShutterstockApiReference.InlineResponse20019, root.ShutterstockApiReference.InlineResponse20020, root.ShutterstockApiReference.InlineResponse20032, root.ShutterstockApiReference.InlineResponse20033);
  }
}(this, function(ApiClient, Body17, Body24, InlineResponse20014, InlineResponse20015, InlineResponse20016, InlineResponse20017, InlineResponse20018, InlineResponse20019, InlineResponse20020, InlineResponse20032, InlineResponse20033) {
  'use strict';

  /**
   * EditorialImages service.
   * @module api/EditorialImagesApi
   * @version 1.2.0
   */

  /**
   * Constructs a new EditorialImagesApi. 
   * @alias module:api/EditorialImagesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    this.setAppName = function (value) {
      this.apiClient.defaultHeaders = Object.assign({}, this.apiClient.defaultHeaders, {
        'x-shutterstock-application': value + ',shutterstock-sdk/v1.2.0',
      });
    };




    /**
     * (Deprecated) List editorial categories
     * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20033} and HTTP response
     */
    this.getEditorialCategoriesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/v2/editorial/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) List editorial categories
     * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20033}
     */
    this.getEditorialCategories = function() {
      return this.getEditorialCategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get editorial content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Editorial ID
     * @param {String} country Returns only if the content is available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.getEditorialImageWithHttpInfo = function(id, country) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialImage");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImage");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'country': country,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/v2/editorial/images/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get editorial content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Editorial ID
     * @param {String} country Returns only if the content is available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.getEditorialImage = function(id, country) {
      return this.getEditorialImageWithHttpInfo(id, country)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List editorial image licenses
     * This endpoint lists existing editorial image licenses.
     * @param {Object} opts Optional parameters
     * @param {String} opts.image_id Show licenses for the specified editorial image ID
     * @param {String} opts.license Show editorial images that are available with the specified license name
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.sort Sort order (default to newest)
     * @param {String} opts.username Filter licenses by username of licensee
     * @param {Date} opts.start_date Show licenses created on or after the specified date
     * @param {Date} opts.end_date Show licenses created before the specified date
     * @param {module:model/String} opts.download_availability Filter licenses by download availability (default to all)
     * @param {Boolean} opts.team_history Set to true to see license history for all members of your team. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getEditorialImageLicenseListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'image_id': opts['image_id'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['per_page'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
        'download_availability': opts['download_availability'],
        'team_history': opts['team_history'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/editorial/images/licenses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List editorial image licenses
     * This endpoint lists existing editorial image licenses.
     * @param {Object} opts Optional parameters
     * @param {String} opts.image_id Show licenses for the specified editorial image ID
     * @param {String} opts.license Show editorial images that are available with the specified license name
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {module:model/String} opts.sort Sort order (default to newest)
     * @param {String} opts.username Filter licenses by username of licensee
     * @param {Date} opts.start_date Show licenses created on or after the specified date
     * @param {Date} opts.end_date Show licenses created before the specified date
     * @param {module:model/String} opts.download_availability Filter licenses by download availability (default to all)
     * @param {Boolean} opts.team_history Set to true to see license history for all members of your team. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getEditorialImageLicenseList = function(opts) {
      return this.getEditorialImageLicenseListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get editorial livefeed
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed is available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20020} and HTTP response
     */
    this.getEditorialImageLivefeedWithHttpInfo = function(id, country) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialImageLivefeed");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImageLivefeed");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'country': country,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/v2/editorial/images/livefeeds/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get editorial livefeed
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed is available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20020}
     */
    this.getEditorialImageLivefeed = function(id, country) {
      return this.getEditorialImageLivefeedWithHttpInfo(id, country)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get editorial livefeed items
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed items are available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getEditorialImageLivefeedItemsWithHttpInfo = function(id, country) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialImageLivefeedItems");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImageLivefeedItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'country': country,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/editorial/images/livefeeds/{id}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get editorial livefeed items
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed items are available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getEditorialImageLivefeedItems = function(id, country) {
      return this.getEditorialImageLivefeedItemsWithHttpInfo(id, country)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get editorial livefeed list
     * @param {String} country Returns only livefeeds that are available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20019} and HTTP response
     */
    this.getEditorialImageLivefeedListWithHttpInfo = function(country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImageLivefeedList");
      }


      var pathParams = {
      };
      var queryParams = {
        'country': country,
        'page': opts['page'],
        'per_page': opts['per_page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/v2/editorial/images/livefeeds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get editorial livefeed list
     * @param {String} country Returns only livefeeds that are available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20019}
     */
    this.getEditorialImageLivefeedList = function(country, opts) {
      return this.getEditorialImageLivefeedListWithHttpInfo(country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * (Deprecated) Get editorial content details
     * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Editorial ID
     * @param {String} country Returns only if the content is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.getEditorialImage_0WithHttpInfo = function(id, country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialImage_0");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImage_0");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'country': country,
        'search_id': opts['search_id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/v2/editorial/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) Get editorial content details
     * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Editorial ID
     * @param {String} country Returns only if the content is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.getEditorialImage_0 = function(id, country, opts) {
      return this.getEditorialImage_0WithHttpInfo(id, country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * (Deprecated) Get editorial livefeed
     * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed is available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20020} and HTTP response
     */
    this.getEditorialLivefeedWithHttpInfo = function(id, country) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialLivefeed");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialLivefeed");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'country': country,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/v2/editorial/livefeeds/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) Get editorial livefeed
     * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed is available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20020}
     */
    this.getEditorialLivefeed = function(id, country) {
      return this.getEditorialLivefeedWithHttpInfo(id, country)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * (Deprecated) Get editorial livefeed items
     * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed items are available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.getEditorialLivefeedItemsWithHttpInfo = function(id, country) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialLivefeedItems");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialLivefeedItems");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'country': country,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/editorial/livefeeds/{id}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) Get editorial livefeed items
     * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed items are available for distribution in a certain country
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.getEditorialLivefeedItems = function(id, country) {
      return this.getEditorialLivefeedItemsWithHttpInfo(id, country)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * (Deprecated) Get editorial livefeed list
     * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
     * @param {String} country Returns only livefeeds that are available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20032} and HTTP response
     */
    this.getEditorialLivefeedListWithHttpInfo = function(country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialLivefeedList");
      }


      var pathParams = {
      };
      var queryParams = {
        'country': country,
        'page': opts['page'],
        'per_page': opts['per_page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/v2/editorial/livefeeds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) Get editorial livefeed list
     * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
     * @param {String} country Returns only livefeeds that are available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20032}
     */
    this.getEditorialLivefeedList = function(country, opts) {
      return this.getEditorialLivefeedListWithHttpInfo(country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * (Deprecated) List updated content
     * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
     * @param {module:model/String} type Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
     * @param {Date} date_updated_start Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {Date} date_updated_end Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date_taken_start Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
     * @param {Date} opts.date_taken_end Show images that were taken before the specified date
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:model/String} opts.sort Sort by (default to newest)
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Number} opts.per_page Number of results per page (default to 500)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response
     */
    this.getUpdatedEditorialImageWithHttpInfo = function(type, date_updated_start, date_updated_end, country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getUpdatedEditorialImage");
      }

      // verify the required parameter 'date_updated_start' is set
      if (date_updated_start === undefined || date_updated_start === null) {
        throw new Error("Missing the required parameter 'date_updated_start' when calling getUpdatedEditorialImage");
      }

      // verify the required parameter 'date_updated_end' is set
      if (date_updated_end === undefined || date_updated_end === null) {
        throw new Error("Missing the required parameter 'date_updated_end' when calling getUpdatedEditorialImage");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getUpdatedEditorialImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type,
        'date_updated_start': date_updated_start,
        'date_updated_end': date_updated_end,
        'date_taken_start': opts['date_taken_start'],
        'date_taken_end': opts['date_taken_end'],
        'cursor': opts['cursor'],
        'sort': opts['sort'],
        'country': country,
        'per_page': opts['per_page'],
      };
      var collectionQueryParams = {
        'supplier_code': {
          value: opts['supplier_code'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/v2/editorial/updated', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) List updated content
     * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
     * @param {module:model/String} type Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
     * @param {Date} date_updated_start Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {Date} date_updated_end Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date_taken_start Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
     * @param {Date} opts.date_taken_end Show images that were taken before the specified date
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:model/String} opts.sort Sort by (default to newest)
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Number} opts.per_page Number of results per page (default to 500)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}
     */
    this.getUpdatedEditorialImage = function(type, date_updated_start, date_updated_end, country, opts) {
      return this.getUpdatedEditorialImageWithHttpInfo(type, date_updated_start, date_updated_end, country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List updated content
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @param {module:model/String} type Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
     * @param {Date} date_updated_start Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {Date} date_updated_end Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date_taken_start Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
     * @param {Date} opts.date_taken_end Show images that were taken before the specified date
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:model/String} opts.sort Sort by (default to newest)
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Number} opts.per_page Number of results per page (default to 500)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response
     */
    this.getUpdatedEditorialImagesWithHttpInfo = function(type, date_updated_start, date_updated_end, country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getUpdatedEditorialImages");
      }

      // verify the required parameter 'date_updated_start' is set
      if (date_updated_start === undefined || date_updated_start === null) {
        throw new Error("Missing the required parameter 'date_updated_start' when calling getUpdatedEditorialImages");
      }

      // verify the required parameter 'date_updated_end' is set
      if (date_updated_end === undefined || date_updated_end === null) {
        throw new Error("Missing the required parameter 'date_updated_end' when calling getUpdatedEditorialImages");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getUpdatedEditorialImages");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type,
        'date_updated_start': date_updated_start,
        'date_updated_end': date_updated_end,
        'date_taken_start': opts['date_taken_start'],
        'date_taken_end': opts['date_taken_end'],
        'cursor': opts['cursor'],
        'sort': opts['sort'],
        'country': country,
        'per_page': opts['per_page'],
      };
      var collectionQueryParams = {
        'supplier_code': {
          value: opts['supplier_code'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/v2/editorial/images/updated', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List updated content
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @param {module:model/String} type Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
     * @param {Date} date_updated_start Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {Date} date_updated_end Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date_taken_start Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
     * @param {Date} opts.date_taken_end Show images that were taken before the specified date
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:model/String} opts.sort Sort by (default to newest)
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Number} opts.per_page Number of results per page (default to 500)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}
     */
    this.getUpdatedEditorialImages = function(type, date_updated_start, date_updated_end, country, opts) {
      return this.getUpdatedEditorialImagesWithHttpInfo(type, date_updated_start, date_updated_end, country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * (Deprecated) License editorial content
     * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param {module:model/Body24} body License editorial content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.licenseEditorialImageWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling licenseEditorialImage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/editorial/licenses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) License editorial content
     * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param {module:model/Body24} body License editorial content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.licenseEditorialImage = function(body) {
      return this.licenseEditorialImageWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * License editorial content
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param {module:model/Body17} body License editorial content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.licenseEditorialImagesWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling licenseEditorialImages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customer_accessCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v2/editorial/images/licenses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * License editorial content
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param {module:model/Body17} body License editorial content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.licenseEditorialImages = function(body) {
      return this.licenseEditorialImagesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List editorial categories
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response
     */
    this.listEditorialImageCategoriesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/v2/editorial/images/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List editorial categories
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20015}
     */
    this.listEditorialImageCategories = function() {
      return this.listEditorialImageCategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list editorial image details
     * This endpoint lists the details of editorial images.
     * @param {Array.<String>} id ID of the editorial image to list details for
     * @param {String} country Show only editorial image content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20018} and HTTP response
     */
    this.listEditorialImagesWithHttpInfo = function(id, country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listEditorialImages");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling listEditorialImages");
      }


      var pathParams = {
      };
      var queryParams = {
        'country': country,
        'search_id': opts['search_id'],
      };
      var collectionQueryParams = {
        'id': {
          value: id,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/v2/editorial/images', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * list editorial image details
     * This endpoint lists the details of editorial images.
     * @param {Array.<String>} id ID of the editorial image to list details for
     * @param {String} country Show only editorial image content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.search_id The ID of the search that is related to this request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20018}
     */
    this.listEditorialImages = function(id, country, opts) {
      return this.listEditorialImagesWithHttpInfo(id, country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * (Deprecated) Search editorial content
     * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.query One or more search terms separated by spaces
     * @param {module:model/String} opts.sort Sort by (default to relevant)
     * @param {String} opts.category Show editorial content within a certain editorial category; specify by category name
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Date} opts.date_start Show only editorial content generated on or after a specific date
     * @param {Date} opts.date_end Show only editorial content generated on or before a specific date
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    this.searchEditorialWithHttpInfo = function(country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling searchEditorial");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'category': opts['category'],
        'country': country,
        'date_start': opts['date_start'],
        'date_end': opts['date_end'],
        'per_page': opts['per_page'],
        'cursor': opts['cursor'],
      };
      var collectionQueryParams = {
        'supplier_code': {
          value: opts['supplier_code'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/v2/editorial/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * (Deprecated) Search editorial content
     * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.query One or more search terms separated by spaces
     * @param {module:model/String} opts.sort Sort by (default to relevant)
     * @param {String} opts.category Show editorial content within a certain editorial category; specify by category name
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Date} opts.date_start Show only editorial content generated on or after a specific date
     * @param {Date} opts.date_end Show only editorial content generated on or before a specific date
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    this.searchEditorial = function(country, opts) {
      return this.searchEditorialWithHttpInfo(country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search editorial images
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.query One or more search terms separated by spaces
     * @param {module:model/String} opts.sort Sort by (default to relevant)
     * @param {String} opts.category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Date} opts.date_start Show only editorial content generated on or after a specific date
     * @param {Date} opts.date_end Show only editorial content generated on or before a specific date
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    this.searchEditorialImagesWithHttpInfo = function(country, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling searchEditorialImages");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'category': opts['category'],
        'country': country,
        'date_start': opts['date_start'],
        'date_end': opts['date_end'],
        'per_page': opts['per_page'],
        'cursor': opts['cursor'],
      };
      var collectionQueryParams = {
        'supplier_code': {
          value: opts['supplier_code'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'customer_accessCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/v2/editorial/images/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search editorial images
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} opts.query One or more search terms separated by spaces
     * @param {module:model/String} opts.sort Sort by (default to relevant)
     * @param {String} opts.category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
     * @param {Array.<String>} opts.supplier_code Show only editorial content from certain suppliers
     * @param {Date} opts.date_start Show only editorial content generated on or after a specific date
     * @param {Date} opts.date_end Show only editorial content generated on or before a specific date
     * @param {Number} opts.per_page Number of results per page (default to 20)
     * @param {String} opts.cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    this.searchEditorialImages = function(country, opts) {
      return this.searchEditorialImagesWithHttpInfo(country, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
